{% if prod %}
  {% assign product = prod %}
{% elsif item %}
  {% assign product = item %}
{% endif %}

{% if panda-swatch == "product" %}
    <script>
    //functions to hide the selectors.
    var psClosestByTag = function(el, tag) {
      while (el.tagName != tag) {
        el = el.parentNode;
        if (!el) {
          return null;
        }
      }
      return el;
    }

    var psHaveClass = function(element, cls) {
      return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    }

    var psHideElem = function(optionIndex) {
      var psCont = document.getElementsByClassName("panda-swatches-cont");

      if(psCont) {

        Array.prototype.forEach.call(psCont, function(elem) {

          var formEl = psClosestByTag(elem, "FORM");

          if(formEl) {
            var selector3 = formEl.getElementsByClassName("selector-wrapper");
            var selector2 = formEl.getElementsByClassName("radio-wrapper");
            var selector1 = formEl.getElementsByClassName("inline-field-wrapper");
            var selector4 = formEl.getElementsByClassName("product-form__item");
            var selector5 = formEl.getElementsByClassName("single-option-selector");
            var selector6 = formEl.getElementsByClassName("variant-wrapper");
            var selector7 = formEl.getElementsByClassName("select-wrapper");
            var swatchSelector = formEl.getElementsByClassName("swatch");

            if(selector1 && selector1[optionIndex]) {
              selector1[optionIndex].style.cssText = 'display:none !important';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(selector2 && selector2[optionIndex]) {
              selector2[optionIndex].style.cssText = 'display:none !important';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(selector3 && selector3[optionIndex]) {

              if(selector3.length <= 1 && selector3[optionIndex].parentNode.classList.contains("select")) {
                selector3[optionIndex].parentNode.style.cssText = 'display:none !important';
              }

              selector3[optionIndex].style.cssText = 'display:none !important';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(selector4 && selector4[optionIndex] && !selector4[optionIndex].classList.contains("product-form__item--submit")) {
              selector4[optionIndex].style.cssText = 'display:none !important';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(selector5 && selector5[optionIndex]) {
              if(selector5[optionIndex].parentNode.classList.contains("styled-select")) {
                selector5[optionIndex].parentNode.style.cssText = 'display:none !important';
              }

              if(selector5[optionIndex].parentNode.parentNode.classList.contains("form__control")) {
                selector5[optionIndex].parentNode.parentNode.style.cssText = 'display:none !important';
              } else if(selector5[optionIndex].parentNode.parentNode.parentNode.classList.contains("form__control")) {
                selector5[optionIndex].parentNode.parentNode.parentNode.style.cssText = 'display:none !important';
              }

              selector5[optionIndex].style.display = 'none';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(selector6 && selector6[optionIndex]) {
              selector6[optionIndex].style.cssText = 'display:none !important';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(selector7 && selector7[optionIndex]) {
              selector7[optionIndex].parentNode.parentNode.style.cssText = 'display:none !important';
              clearInterval(thisSetInterVal[optionIndex]);
            }

            if(swatchSelector && swatchSelector[optionIndex]) {
              swatchSelector[optionIndex].style.cssText = 'display:none !important';
            }
          }

        })
      }
    }

    var thisSetInterVal = [];

    </script>
{% endif %}

{% comment %}
  Set settings
{% endcomment %}

{% assign collection_switch_images = false %}
{% assign collection_redirect_url = false %}
{% assign collection_show_one_swatch = 1 %}
{% assign show_swatch_in_header = false %}
{% assign linked_options = nil %}

{% comment %}
  Start our code of the html.
{% endcomment %}

  {% assign choosenOptions = "Color |ps-split| " | split: ' |ps-split| ' %}
  {% assign collectionOptions = "Color |ps-split| " | split: ' |ps-split| ' %}
  {% assign optionsNames = "Color |ps-split| " | split: ' |ps-split| ' %}
  {% assign defaultStyleOptions = "" | split: ' |ps-split| ' %}

  {% assign shopifyDomain = shop.permanent_domain | replace : ".myshopify.com", "" %}

  {% if product.options.size > 1 or product.options.size == 1 and product.options[0] != "Title" %}
    {% for option in product.options_with_values %}

      {% if choosenOptions contains option.name %}

        {% if defaultStyleOptions contains option.name %}
			{% assign useDefaultStyle = true %}
		{% else %}
			{% assign useDefaultStyle = nil %}
		{% endif %}

		{% comment %}
			Parse the name of the option for the URL.
		{% endcomment %}

		{% assign parsedOptionName = option.name
        | replace: " ", "-"
        | replace: "(", "1"
		| replace: ")", "2"
		| replace: "'", "3"
		| replace: "+", "4"
		| replace: "#", "5"
		| replace: ".", "6"
		| replace: "/", "7"
		| replace: "*", "8"
		| replace: "&", "9"
		| replace: "!", "10"
		| replace: "@", "11"
		| replace: "%", "12"
		| replace: "|", "13"
		| replace: "^", "14"
		| replace: "$", "15"
		| replace: "?", "16"
		| replace: "\", "17"
		| replace: "--", "-"
		| replace: "--", "-" %}

		{% for optionName in choosenOptions %}
			{% if optionName == option.name %}
				{% assign panda-swatch-name = optionsNames[forloop.index0] %}
				{% break; %}
			{% endif %}
		{% endfor %}

		{% assign option_index = forloop.index0 %}
        {% assign option_index_to_hide = forloop.index %}
        {% assign optionIndex = "option" | append: option_index_to_hide %}
		{% assign selected = "" %}

        {% if panda-swatch == "product" %}

          <div class="panda-swatches-cont ps-align-left clearfix {% if option.name contains "Color" %}list-colors{% endif %}"  data-option-name="{{ option.name }}" data-changed-option-name="{{ panda-swatch-name }}" data-option-index="{{ option_index }}">
            {% unless option.name contains "Color" %}
            {% if show_swatch_in_header %}
                <label class="panda-header">{{ panda-swatch-name }}: {{ product.selected_or_first_available_variant[optionIndex] }}</label>
            {% else %}
                <label class="panda-header">{{ panda-swatch-name }}</label>
            {% endif %}
			{% endunless %}
            {% for value in option.values %}

              {% comment %}
                Parse the name of the swatch for the URL.
              {% endcomment %}

              {% assign parsedSwatchName = value
              | replace: " ", "-"
              | replace: "(", "1"
              | replace: ")", "2"
              | replace: "'", "3"
              | replace: "Ã©", "e"
              | replace: "+", "4"
              | replace: "#", "5"
              | replace: ".", "6"
              | replace: "/", "7"
              | replace: "*", "8"
              | replace: "&", "9"
              | replace: "!", "10"
              | replace: "@", "11"
              | replace: "%", "12"
              | replace: "|", "13"
              | replace: "^", "14"
              | replace: "$", "15"
              | replace: "?", "16"
              | replace: "\", "17"
              | replace: "--", "-"
              | replace: "--", "-" %}

              {% assign selected = "" %}

              {% if product.selected_or_first_available_variant[optionIndex] == value  %}
                  {% assign selected = "ps-selected" %}
              {% endif %}

              <div class="panda-swatch {% if useDefaultStyle %}panda-swatch-default{% endif %} {{ selected }}" data-value="{{ value | escape }}">

                {% if linked_options == 'cross' %}
                  <div class="ps-cross-out"></div>
                {% endif %}

                {% if useDefaultStyle %}
                  	<span>{{ value }}</span>
                {% else %}
                    <div class="ps-image-cont" style="background-size: cover; background-color:{{ parsedSwatchName }};background-position: center center; background-image: url(https://s3-us-west-2.amazonaws.com/swatchify-static.sellerpanda.com/swatches/{{ shopifyDomain }}/{{ parsedOptionName }}/{{ parsedSwatchName }}.png);">
                      
                    </div>
                    
                    
                {% endif %}
              </div>

            {% endfor %}

          </div>

          <script>
            psHideElem({{ option_index }});

            thisSetInterVal[{{ option_index }}] = setInterval(function() {
              psHideElem({{ option_index }});
            }, 100);

            setTimeout(function() {
              psHideElem({{ option_index }});
            }, 500);

            setTimeout(function() {
              psHideElem({{ option_index }});
            }, 1000);

          </script>
        {% else %}
            {% if collectionOptions contains option.name and useDefaultStyle == nil %}

                {% assign valueCount = 1 %}
                {% assign valueLeft = 0 %}
                {% assign valuesSize = option.values.size %}
                {% assign imageUrl = nil %}

                {% if option.values.size > collection_show_one_swatch %}

                  <div class="panda-swatches-coll-cont">
                    {% for value in option.values %}

                      {% if valueCount > 3 %}
                          {% assign valueLeft = option.values.size | minus: 3 %}
                          {% break %}
                      {% else %}
                          {% assign valueCount = valueCount | plus: 1 %}
                      {% endif %}

                    {% comment %}
                      Parse the name of the swatch for the URL.
                    {% endcomment %}

                    {% assign parsedSwatchName = value
                    | replace: " ", "-"
                    | replace: "(", "1"
                    | replace: ")", "2"
                    | replace: "'", "3"
                    | replace: "Ã©", "e"
                    | replace: "+", "4"
                    | replace: "#", "5"
                    | replace: ".", "6"
                    | replace: "/", "7"
                    | replace: "*", "8"
                    | replace: "&", "9"
                    | replace: "!", "10"
                    | replace: "@", "11"
                    | replace: "%", "12"
                    | replace: "|", "13"
                    | replace: "^", "14"
                    | replace: "$", "15"
                    | replace: "?", "16"
                    | replace: "\", "17"
                    | replace: "--", "-"
                    | replace: "--", "-" %}

                    {% for variant in product.variants %}
                      {% if variant[optionIndex] != value %}
                          {% continue %}
                      {% endif %}

                      {% if variant.available %}
                        {% assign variantUrl = variant.url %}
                      {% endif %}

                      {% if variant.image.src != nil %}
                        {% assign imageUrl = variant.image.src | img_url: 'large' %}
                        {% assign imageAspect = variant.image.aspect_ratio %}
                        <script> img = new Image(); img.src = "{{ variant.image.src | img_url: 'large' }}";</script>
                        {% break %}
                      {% else %}
                        {% assign imageUrl = nil %}
                      {% endif %}

                    {% endfor %}

                    <div class="panda-swatch-coll{% if collection_switch_images == 1 and imageUrl != nil %} ps-have-image{% endif %}" data-src="{{ imageUrl }}" data-aspectRatio="{{ imageAspect }}" data-variant-url="{{ variantUrl }}">

                      <div class="ps-image-cont" style="background-size: cover; background-color:{{ parsedSwatchName }};background-position: center center; background-image: url(https://s3-us-west-2.amazonaws.com/swatchify-static.sellerpanda.com/swatches/{{ shopifyDomain }}/{{ parsedOptionName }}/{{ parsedSwatchName }}.png);">

                      </div>

                    </div>

                  {% endfor %}
                    {% if valueLeft > 0 %}
                    <label class="ps-have-more" data-src="{{ product.url | within: collection }}">{{ valueLeft }} More</label>
                    {% endif %}
                  </div>

                  {% break %}

                {% endif %}
            {% endif %}
        {% endif %}

      {% endif %}

    {% endfor %}

  {% endif %}

{{ 'script_p.js' | asset_url | script_tag }}

<script>
(function() {

    function getWrapperOption($, that) {
        var option1 = $(that).closest('form').find('.inline-field-wrapper');
        var option2 = $(that).closest('form').find('.selector-wrapper');
        var option3 = $(that).closest('form').find('.radio-wrapper');
        var option4 = $(that).closest('form').find('.product-form__item');
        var option5 = $(that).closest('form').find('.single-option-selector');
        var option6 = $(that).closest('form').find('.variant-wrapper');
        var option7 = $(that).closest('form').find('.select-wrapper');

        if(option7.length) return [option7.find("select"), "select"];
        if(option1.length) return [option1.find("select"), "select"];
        if(option2.length) return [option2.find("select"), "select"];
        if(option3.length && option3.find("fieldset").length) return [option3.find("fieldset"), "fieldset"];
        if(option3.length && option3.find(".single-option-radio").length) return [option3.find(".single-option-radio"), "fieldset"];
        if(option4.length) return [option4.find("select"), "select"];
        if(option5.length) return [option5, "select"];
        if(option6.length && option6.find("fieldset").length) return [option6.find("fieldset"), "fieldset"];

        return [false];
    }

    function triggerEvent(el, type){
       if ('createEvent' in document) {
            // modern browsers, IE9+
            var e = document.createEvent('HTMLEvents');
            e.initEvent(type, false, true);
            el.dispatchEvent(e);
        } else {
            // IE 8
            var e = document.createEventObject();
            e.eventType = type;
            el.fireEvent('on'+e.eventType, e);
        }
    }

{% if panda-swatch == "product" %}

  var myAppJavaScript = function($) {

    {% if linked_options %}
      {% assign availableVariants = "" %}

      {% for variant in product.variants %}
        {% if variant.available %}
          {% assign availableVariants = availableVariants | append: '"' | append: variant.title | append: '",' %}
        {% endif %}
      {% endfor %}

      var psVaraintsAvailable = [{{ availableVariants }}];

      var findContInter = setInterval(function() {
        var varWrapper = getWrapperOption($, $(".panda-swatches-cont .panda-swatch")[0]);

        if(varWrapper[0] != false) {
          clearInterval(findContInter);

            if(varWrapper[0].length == 1) {
                $(".panda-swatches-cont").each(function() {
                    var option = $(this).data("optionIndex");

                    $(this).find(".panda-swatch").each(function() {
                      var value = $(this).data("value");

                      {% if linked_options == "hide" %}
                      if(psVaraintsAvailable.indexOf(value) !== -1 ) {
                        $(this).removeClass("ps-hide");
                      } else {
                        $(this).addClass("ps-hide");
                      }
                      {% else %}
                        if(psVaraintsAvailable.indexOf(value) !== -1 ) {
                          $(this).removeClass("ps-crossed");
                        } else {
                          $(this).addClass("ps-crossed");
                        }
                      {% endif %}
                    });

                    {% if linked_options == "hide" %}
                      if($(this).find(".ps-selected.ps-hide")) {
                        $(this).find(".panda-swatch:visible:first").click();
                      }
                    {% else %}
                      if($(this).find(".ps-selected.ps-crossed")) {
                        $(this).find(".panda-swatch:not('.ps-crossed'):first").click();
                      }
                    {% endif %}
                  });
              } else {
                  var i = 0;
                  varWrapper[0].each(function(){ $(this).data("ps-option-num", i++)});

                  varWrapper[0].change(function() {
                    var optionNum = $(this).data("ps-option-num");
                    var changeToVal = $(this).val();
                    var psAvailableSwatches = { 0: [], 1: [], 2: [] };

                    psVaraintsAvailable.forEach(function(variantTitle) {
                      var variantTitleArr = variantTitle.split(" / ");

                      if(variantTitleArr[optionNum] == changeToVal) {
                        if(optionNum != 0) {
                          psAvailableSwatches[0].push(variantTitleArr[0]);
                        }

                        if(optionNum != 1) {
                          psAvailableSwatches[1].push(variantTitleArr[1]);
                        }

                        if(optionNum != 2) {
                          psAvailableSwatches[2].push(variantTitleArr[2]);
                        }

                      }

                    });

                    $(".panda-swatches-cont").each(function() {
                      var option = $(this).data("optionIndex");

                      if(psAvailableSwatches[option].length == 0 || option <= optionNum) {
                          return true;
                      }

                      $(this).find(".panda-swatch").each(function() {
                        var value = $(this).data("value");

                        {% if linked_options == "hide" %}
                        if(psAvailableSwatches[option].indexOf(value.toString()) !== -1 ) {
                          $(this).removeClass("ps-hide");
                        } else {
                          $(this).addClass("ps-hide");
                        }
                        {% else %}
                          if(psAvailableSwatches[option].indexOf(value.toString()) !== -1 ) {
                            $(this).removeClass("ps-crossed");
                          } else {
                            $(this).addClass("ps-crossed");
                          }
                        {% endif %}
                      });

                      {% if linked_options == "hide" %}
                        if($(this).find(".ps-selected.ps-hide").length > 0) {
                          $(this).find(".panda-swatch:visible:first").click();
                        }
                      {% else %}
                        if($(this).find(".ps-selected.ps-crossed").length > 0) {
                          $(this).find(".panda-swatch:not('.ps-crossed'):first").click();
                        }
                      {% endif %}
                    });
                  });

                  triggerEvent(varWrapper[0][0], "change");
          }
        }
      }, 1000);

    {% endif %}

    setTimeout(function() {$(".panda-swatches-cont .panda-swatch.ps-selected").click();}, 1);

    $(".panda-swatches-cont").each(function() {

      var option = $(this).data("optionIndex");
      var that = this;

      var varWrapper = getWrapperOption($, $(".panda-swatches-cont .panda-swatch")[0]);

        if(varWrapper[0] != false) {
          $(".image-swap").click(function() {
          	$($(varWrapper[0])[option]).change();
          });

          $($(varWrapper[0])[option]).change(function() {
          	var value = $(this).val();

            $(that).find(".panda-swatch[data-value='" + value + "']:not(.ps-selected)").click();
          });
        }
    });

    $(".panda-swatches-cont .panda-swatch").click(function() {

      if($(this).hasClass("ps-crossed")) {
      	return;
      }

      varWrapper = getWrapperOption($, this);

      var changedOptionName = $(this).parent().data("changedOptionName");
      var swatchName = $(this).data("value");
      var optionIndex = $(this).closest(".panda-swatches-cont").data("optionIndex");

      {% if show_swatch_in_header %}
        $(this).siblings(".panda-header").text(changedOptionName + ": " + swatchName);
      {% endif %}

      $(this).closest(".panda-swatches-cont").find(".panda-swatch.ps-selected").removeClass("ps-selected");
      $(this).addClass("ps-selected");

      if(varWrapper[0]) {
        switch(varWrapper[1]) {
          case "select":
            $(varWrapper[0][optionIndex]).val(swatchName).trigger('change');
            triggerEvent(varWrapper[0][optionIndex], "change");
            break;

          case "fieldset":
            $(varWrapper[0][optionIndex]).find('input[value="' + swatchName + '"]').trigger('click');
            break;

          default:
            console.log("Swatchify Didn't found warapper.", varWrapper);
            break;
      	}
      } else {
      	console.log("Swatchify Didn't found warapper.", varWrapper);
      }
    });
  	//console.log($.fn.jquery);
  }

{% else %}

  var myAppJavaScript = function($) {

    var psImageWidth = null;

    $(".panda-swatches-coll-cont .panda-swatch-coll.ps-have-image").click(function(e) {

      if(!$(this).data("changing")) {
        $(this).data("changing", true);

        var productWrapper2 = $(this).closest(".grid-product");
        var productWrapper3 = $(this).closest(".grid-item");
        var productWrapper4 = $(this).closest(".grid__item");
        var productWrapper6 = $(this).closest(".product-item");
        var productWrapper7 = $(this).closest(".main_box");
        var productWrapper8 = $(this).closest(".thumbnail");
        var productWrapper9 = $(this).closest(".product-preview");
        var productWrapper = $(this).closest(".product-wrapper");
        var productWrapper5 = $(this).closest(".product");
        var productWrapper10 = $(this).closest(".product-list-item");
        var productWrapper11 = $(this).closest(".product-block");
        var productWrapper12 = $(this).closest(".product-inner");
        var productWrapper13 = $(this).closest(".product-index");
        var productWrapper14 = $(this).closest(".productgrid--item");
        var productWrapper15 = $(this).closest(".o-layout__item");
        var productWrapper16 = $(this).closest(".item");

        var imgSrc = $(this).data("src");
        var imgAspect = 1 / $(this).data("aspectratio") * 100;

        if(productWrapper9.length) {
          productWrapper = productWrapper9;
        } else if(productWrapper2.length) {
          productWrapper = productWrapper2;
        } else if(productWrapper3.length) {
          productWrapper = productWrapper3;
        } else if(productWrapper4.length) {
          productWrapper = productWrapper4;
        } else if(productWrapper6.length) {
          productWrapper = productWrapper6;
        } else if(productWrapper7.length) {
          productWrapper = productWrapper7;
        } else if(productWrapper8.length) {
          productWrapper = productWrapper8;
        } else if(productWrapper.length) {
          productWrapper = productWrapper;
        } else if(productWrapper12.length) {
          productWrapper = productWrapper12;
        } else if(productWrapper5.length) {
          productWrapper = productWrapper5;
        } else if(productWrapper10.length) {
          productWrapper = productWrapper10;
        } else if(productWrapper11.length) {
          productWrapper = productWrapper11;
        } else if(productWrapper13.length) {
          productWrapper = productWrapper13;
        } else if(productWrapper14.length) {
          productWrapper = productWrapper14;
        } else if(productWrapper15.length) {
          productWrapper = productWrapper15;
        } else if(productWrapper16.length) {
          productWrapper = productWrapper16;
        }

        var imageCont = productWrapper.find("img:not(.ps-image)").first();

        if({{ collection_switch_images }} === 1 && imgSrc && productWrapper.length > 0 && imageCont.attr("src") != imgSrc) {
          imageCont.attr("src", imgSrc);
          imageCont.siblings("img").attr("src", imgSrc);

          if(!psImageWidth && imageCont.attr("srcset")) {
          	var srcset = imageCont.attr("srcset");
            var srcsetArr = [];

            srcsetArr = srcset.split(".");
            srcsetArr = srcsetArr[srcsetArr.length - 2].split("_");
            srcsetArr = srcsetArr[srcsetArr.length - 1].split("@");

            psImageWidth = srcsetArr[0];
          }

          if(imageCont.attr("srcset")) {
          	imageCont.attr("srcset", imgSrc.replace("_large", "_" + psImageWidth));
          	imageCont.attr("data-srcset", imgSrc.replace("_large", "_" + psImageWidth));
          }

          if(imageCont.hasClass("lazyautosizes")) {
            imageCont.attr("data-src", imgSrc.replace("_large", "_{width}x")).attr("data-aspectratio", $(this).data("aspectratio")).addClass("lazyload");
          }

          if(productWrapper.find("img:not(.ps-image)").parent().prop("tagName") == "FIGURE" ) {
            productWrapper.find("img:not(.ps-image)").parent().animate({opacity: 0}, 100, function() {
              $(this).css("background-image", "url('" + imgSrc + "')").animate({opacity: 1}, 100)
            })
          }

          e.stopPropagation();
          e.preventDefault();
        }

        $(this).data("changing", false);

      }
    });

    {% if collection_redirect_url %}
      $(".panda-swatches-coll-cont .panda-swatch-coll.ps-have-image").click(function(e) {
        var variantUrl = $(this).data("variantUrl");

        if(variantUrl) {
        	document.location.href = variantUrl;
        }

        e.stopPropagation();
        e.preventDefault();
      })
    {% endif %}

    $(".panda-swatches-coll-cont .ps-have-more").click(function() {
      var src = $(this).data("src");

      document.location.href = src;
    });
  }
{% endif %}

  var loadScript = function(url, callback) {

    var script = document.createElement("script");
    script.type = "text/javascript";

    // If the browser is Internet Explorer.
    if (script.readyState) {
      script.onreadystatechange = function(){
        if (script.readyState == "loaded" || script.readyState == "complete"){
          script.onreadystatechange = null;
          callback();
        }
      };
    // For any other browser.
    } else {
      script.onload = function(){
        callback();
      };
    }

    script.src = url;
    document.getElementsByTagName("head")[0].appendChild(script);

  };

    var psCountInters = 0;

    var psIncludeJqueryInter = setInterval(function() {
    if (!((typeof jQuery === 'undefined') || (parseInt(jQuery.fn.jquery) === 1 && parseFloat(jQuery.fn.jquery.replace(/^1\./,'')) < 6.4)) ||
        !((typeof $ === 'undefined') || (parseInt($.fn.jquery) === 1 && parseFloat($.fn.jquery.replace(/^1\./,'')) < 6.4))) {
      if((typeof jQuery === 'undefined')) {
        myAppJavaScript($);
      } else {
        myAppJavaScript(jQuery);
      }
        clearInterval(psIncludeJqueryInter);
    }

    if(psCountInters >= 10) {
      loadScript('//ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js', function(){
        jQuery64 = jQuery.noConflict(true);
        myAppJavaScript(jQuery64);
      });
      clearInterval(psIncludeJqueryInter);
    }

    psCountInters++;
    }, 100);

})()
</script>